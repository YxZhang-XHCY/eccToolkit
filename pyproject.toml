[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "eccToolkit"
version = "1.0.0"
description = "A comprehensive toolkit for extrachromosomal circular DNA (eccDNA) analysis"
authors = [{name = "eccToolkit Team", email = "contact@ecctoolkit.org"}]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
keywords = ["eccDNA", "bioinformatics", "genomics", "circular-DNA", "analysis"]

dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "matplotlib>=3.3.0",
    "seaborn>=0.11.0",
    "statsmodels>=0.12.0",
    "pysam>=0.17.0",
    "tqdm>=4.60.0",
    "biopython>=1.79",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

plotting = [
    "matplotlib-venn>=0.11.7",
    "plotly>=5.0.0",
    "bokeh>=2.4.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/eccToolkit"
Documentation = "https://eccToolkit.readthedocs.io/"
Repository = "https://github.com/yourusername/eccToolkit.git"
"Bug Tracker" = "https://github.com/yourusername/eccToolkit/issues"

[project.scripts]
eccToolkit = "eccToolkit.cli:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | build
  | dist
  | deprecated
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["eccToolkit"]
known_third_party = [
    "pandas",
    "numpy",
    "scipy",
    "matplotlib",
    "seaborn",
    "statsmodels",
    "pysam",
    "tqdm",
    "Bio",
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_sort_within_sections = true
force_single_line = false
atomic = true
include_trailing_comma = true
use_parentheses = true
src_paths = ["code", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

# Specific module configurations
[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "seaborn.*",
    "scipy.*",
    "pysam.*",
    "statsmodels.*",
    "matplotlib_venn.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=code",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["code"]
branch = true
omit = [
    "*/tests/*",
    "*/deprecated/*",
    "*/__pycache__/*",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "deprecated"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

# Ruff configuration (alternative to flake8)
[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "deprecated",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["eccToolkit"]